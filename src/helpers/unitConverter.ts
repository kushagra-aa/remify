import {
  remToPx,
  remToEm,
  remToCh,
  remToVw,
  remToVh,
  remToPercent,
  remToPt,
  remToPc,
  pxToRem,
  pxToEm,
  pxToCh,
  pxToVw,
  pxToVh,
  pxToPercent,
  pxToPt,
  pxToPc,
  emToRem,
  emToPx,
  emToCh,
  emToVw,
  emToVh,
  emToPercent,
  emToPt,
  emToPc,
  chToRem,
  chToPx,
  chToEm,
  chToVw,
  chToVh,
  chToPercent,
  chToPt,
  chToPc,
  vwToRem,
  vwToPx,
  vwToEm,
  vwToCh,
  vwToVh,
  vwToPercent,
  vwToPt,
  vwToPc,
  vhToRem,
  vhToPx,
  vhToEm,
  vhToCh,
  vhToVw,
  vhToPercent,
  vhToPt,
  vhToPc,
  percentToRem,
  percentToPx,
  percentToEm,
  percentToCh,
  percentToVw,
  percentToVh,
  percentToPt,
  percentToPc,
  ptToRem,
  ptToPx,
  ptToEm,
  ptToCh,
  ptToVw,
  ptToVh,
  ptToPercent,
  ptToPc,
  pcToRem,
  pcToPx,
  pcToEm,
  pcToCh,
  pcToVw,
  pcToVh,
  pcToPercent,
  pcToPt,
} from "./converters";
import { extractValue } from "./stringHelpers";

const convert = (
  converterFunction: (val: number, base: number) => number,
  val: string,
  base: number
): number => {
  return converterFunction(extractValue(val), base);
};

const unitConverter = {
  remToPx: (val: string, base: number) => convert(remToPx, val, base),
  remToEm: (val: string, base: number) => convert(remToEm, val, base),
  remToCh: (val: string, base: number) => convert(remToCh, val, base),
  remToVw: (val: string, base: number) => convert(remToVw, val, base),
  remToVh: (val: string, base: number) => convert(remToVh, val, base),
  remToPercent: (val: string, base: number) => convert(remToPercent, val, base),
  remToPt: (val: string, base: number) => convert(remToPt, val, base),
  remToPc: (val: string, base: number) => convert(remToPc, val, base),
  pxToRem: (val: string, base: number) => convert(pxToRem, val, base),
  pxToEm: (val: string, base: number) => convert(pxToEm, val, base),
  pxToCh: (val: string, base: number) => convert(pxToCh, val, base),
  pxToVw: (val: string, base: number) => convert(pxToVw, val, base),
  pxToVh: (val: string, base: number) => convert(pxToVh, val, base),
  pxToPercent: (val: string, base: number) => convert(pxToPercent, val, base),
  pxToPt: (val: string, base: number) => convert(pxToPt, val, base),
  pxToPc: (val: string, base: number) => convert(pxToPc, val, base),
  emToRem: (val: string, base: number) => convert(emToRem, val, base),
  emToPx: (val: string, base: number) => convert(emToPx, val, base),
  emToCh: (val: string, base: number) => convert(emToCh, val, base),
  emToVw: (val: string, base: number) => convert(emToVw, val, base),
  emToVh: (val: string, base: number) => convert(emToVh, val, base),
  emToPercent: (val: string, base: number) => convert(emToPercent, val, base),
  emToPt: (val: string, base: number) => convert(emToPt, val, base),
  emToPc: (val: string, base: number) => convert(emToPc, val, base),
  chToRem: (val: string, base: number) => convert(chToRem, val, base),
  chToPx: (val: string, base: number) => convert(chToPx, val, base),
  chToEm: (val: string, base: number) => convert(chToEm, val, base),
  chToVw: (val: string, base: number) => convert(chToVw, val, base),
  chToVh: (val: string, base: number) => convert(chToVh, val, base),
  chToPercent: (val: string, base: number) => convert(chToPercent, val, base),
  chToPt: (val: string, base: number) => convert(chToPt, val, base),
  chToPc: (val: string, base: number) => convert(chToPc, val, base),
  vwToRem: (val: string, base: number) => convert(vwToRem, val, base),
  vwToPx: (val: string, base: number) => convert(vwToPx, val, base),
  vwToEm: (val: string, base: number) => convert(vwToEm, val, base),
  vwToCh: (val: string, base: number) => convert(vwToCh, val, base),
  vwToVh: (val: string, base: number) => convert(vwToVh, val, base),
  vwToPercent: (val: string, base: number) => convert(vwToPercent, val, base),
  vwToPt: (val: string, base: number) => convert(vwToPt, val, base),
  vwToPc: (val: string, base: number) => convert(vwToPc, val, base),
  vhToRem: (val: string, base: number) => convert(vhToRem, val, base),
  vhToPx: (val: string, base: number) => convert(vhToPx, val, base),
  vhToEm: (val: string, base: number) => convert(vhToEm, val, base),
  vhToCh: (val: string, base: number) => convert(vhToCh, val, base),
  vhToVw: (val: string, base: number) => convert(vhToVw, val, base),
  vhToPercent: (val: string, base: number) => convert(vhToPercent, val, base),
  vhToPt: (val: string, base: number) => convert(vhToPt, val, base),
  vhToPc: (val: string, base: number) => convert(vhToPc, val, base),
  percentToRem: (val: string, base: number) => convert(percentToRem, val, base),
  percentToPx: (val: string, base: number) => convert(percentToPx, val, base),
  percentToEm: (val: string, base: number) => convert(percentToEm, val, base),
  percentToCh: (val: string, base: number) => convert(percentToCh, val, base),
  percentToVw: (val: string, base: number) => convert(percentToVw, val, base),
  percentToVh: (val: string, base: number) => convert(percentToVh, val, base),
  percentToPt: (val: string, base: number) => convert(percentToPt, val, base),
  percentToPc: (val: string, base: number) => convert(percentToPc, val, base),
  ptToRem: (val: string, base: number) => convert(ptToRem, val, base),
  ptToPx: (val: string, base: number) => convert(ptToPx, val, base),
  ptToEm: (val: string, base: number) => convert(ptToEm, val, base),
  ptToCh: (val: string, base: number) => convert(ptToCh, val, base),
  ptToVw: (val: string, base: number) => convert(ptToVw, val, base),
  ptToVh: (val: string, base: number) => convert(ptToVh, val, base),
  ptToPercent: (val: string, base: number) => convert(ptToPercent, val, base),
  ptToPc: (val: string, base: number) => convert(ptToPc, val, base),
  pcToRem: (val: string, base: number) => convert(pcToRem, val, base),
  pcToPx: (val: string, base: number) => convert(pcToPx, val, base),
  pcToEm: (val: string, base: number) => convert(pcToEm, val, base),
  pcToCh: (val: string, base: number) => convert(pcToCh, val, base),
  pcToVw: (val: string, base: number) => convert(pcToVw, val, base),
  pcToVh: (val: string, base: number) => convert(pcToVh, val, base),
  pcToPercent: (val: string, base: number) => convert(pcToPercent, val, base),
  pcToPt: (val: string, base: number) => convert(pcToPt, val, base),
};

export default unitConverter;
